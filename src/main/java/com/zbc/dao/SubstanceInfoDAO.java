package com.zbc.dao;

import com.zbc.pojo.PagingInfo;
import org.mybatis.spring.annotation.MapperScan;
import com.zbc.pojo.SubstanceInfoPO;

import java.util.List;

@MapperScan
public interface SubstanceInfoDAO {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table substance_info
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table substance_info
     *
     * @mbg.generated
     */
    int insert(SubstanceInfoPO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table substance_info
     *
     * @mbg.generated
     */
    int insertSelective(SubstanceInfoPO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table substance_info
     *
     * @mbg.generated
     */
    SubstanceInfoPO selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table substance_info
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(SubstanceInfoPO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table substance_info
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(SubstanceInfoPO record);

    /**
     * substance_info 和 substance_content 两表联合查询
     * @param id
     * @return
     */
    SubstanceInfoPO selectIncludeContent(Long id);

    /**
     * 根据用户id查询该用户多少条substance
     * @param id
     * @return
     */
    int countByUserId(Long id);

    /**
     * 根据用户id获得指定 substance 列表
     * @param pagingInfo
     * @return
     */
    List<SubstanceInfoPO> listByBelongUserId(PagingInfo pagingInfo);

    /**
     * 根据输入的字符串，在 substance_info 中查找相应的匹配项
     * @param pagingInfo
     * @return
     */
    List<SubstanceInfoPO> listBySearchStr(PagingInfo pagingInfo);

    /**
     * 根据搜索字符串，查找数据库中公有多少条数据
     * @param searchStr
     * @return
     */
    int countBySearchStr(String searchStr);

    /**
     * 分页查询，如果有searchStr 就添加模糊搜索
     * @param pagingInfo
     * @return
     */
    List<SubstanceInfoPO> listIncludeContent(PagingInfo pagingInfo);

    /**
     * 根据is_verified 返回行数
     * @param isVerified
     * @return
     */
    int countAll(byte isVerified);

    /**
     * 根据分类进行分页查询
     * @param pagingInfo
     * @return
     */
    List<SubstanceInfoPO> listByClassification(PagingInfo pagingInfo);

    /**
     * 根据分类查询公有多少条记录
     * @param pagingInfo
     * @return
     */
    int countByClassification(PagingInfo pagingInfo);
}